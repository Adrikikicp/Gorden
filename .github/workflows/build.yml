on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 8
          distribution: 'temurin'

      - name: Restore caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', '**/*.gradle*', 'gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', '**/*.gradle*' ,'gradle-wrapper.properties') }}
            ${{ runner.os }}-gradle-
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build





      - name: Store Private key
        uses: DamianReeves/write-file-action@v1.1
        if: ${{ steps.bump-semver.outputs.new_version != null }}
        with:
          path: private.key
          contents: ${{ secrets.PRIV_KEY }}
          write-mode: overwrite

      - name: Publish
        if: ${{ steps.bump-semver.outputs.new_version != null }}
        env:
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          SIGN_KEY: ${{ secrets.PRIV_KEY_PASS }}
        run: |
          mkdir -p $HOME/.gnupg
          echo use-agent >> $HOME/.gnupg/gpg.conf
          echo pinentry-mode loopback >> $HOME/.gnupg/gpg.conf
          echo allow-loopback-pinentry >> $HOME/.gnupg/gpg-agent.conf
          gpg --batch --import private.key
          gpg --batch --export-secret-keys --passphrase $SIGN_KEY "Enrique Perez C <adrikikicp@gmail.com>" > private.gpg
          ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository \
            -PossrhUsername=seeseemelk \
            -PossrhPassword=$OSSRH_PASSWORD \
            -Psigning.secretKeyRingFile=private.gpg \
            -Psigning.keyId=${{ secrets.PRIV_KEY_ID }} \
            -Psigning.password=$SIGN_KEY
